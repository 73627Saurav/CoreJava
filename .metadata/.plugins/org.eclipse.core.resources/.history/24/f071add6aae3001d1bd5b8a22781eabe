import java.util.Scanner;

class TestBox {
    public static void main(String[] args) {
        int data = 100;// data : prim type , holds value, method local var : stack
        // sc
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Box dims : w h d");
        
        Box b1;// b1 : ref type var (holds address) : class type of ref , method local var
        // var : allocated memory on stack : bytes will be allocated as per the JVM specification
        // System.out.println(b1);//javac err :
        // object are not created but memory is allocated to store ref type of variable
        // compiler does not allow uninitialized variable
        
        b1 = 	//
        		new	//new keyword returns reference to the object dynamically created on heap nothing but pointer where object is allocated in the heap & assign that address to b1
        			Box(sc.nextDouble(), sc.nextDouble(), sc.nextDouble()); //creating instance of class
        //java is right associative thus RHS is executed first i.e new Box(sc.nextDouble(), sc.nextDouble(), sc.nextDouble());
        //for creating instance first class has to be loaded in method area
        //b1 is holding reference to the current object on heap
        
        //b1++;	//javac error //Type mismatch: cannot convert from Box to int
        
        // display box dims
        System.out.println(b1.getBoxDims());	
        // display box volume
        System.out.println("Box volume " + b1.computeVolume());
        
        Box b2 = b1;// copy of refs
        System.out.println("Box volume " + b2.computeVolume());
        b1 = b2 = null;// 1 object is marked for GC
        System.out.println("Box volume " + b1.computeVolume()); //NullPointerException //runtime error
        	
        System.out.println("Enter side of a cube");
        Box cube = new Box(sc.nextDouble());
        System.out.println(cube.getBoxDims());
        System.out.println("Cube volume " + cube.computeVolume());
        System.out.println("cntd....");
        sc.close();
    }

}
